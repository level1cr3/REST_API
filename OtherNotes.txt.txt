Great questions! Here are clear, beginner-friendly answers:

---

## 1. Should a repository using DbContext (ApplicationContext) be registered as **scoped**?

**YES, it should be registered as scoped.**

- **Why?**
  - `DbContext` in Entity Framework Core is designed to be used per HTTP request (per unit of work).
  - **Scoped** lifetime means one instance per HTTP request or logical operation.
  - If you make it **singleton**, you’ll share a single `DbContext` across all requests, which causes threading issues and incorrect data.
  - If you make it **transient**, you’ll get a new `DbContext` every time, which can break tracking and transactions.

**So:**
```csharp
services.AddScoped<IMyRepository, MyRepository>();
services.AddScoped<ApplicationContext>();
```

---

## 2. What does "has no state" mean? (Easy explanation)

- **"No state"** means the object **doesn’t remember anything between uses**.
- It doesn’t keep any data in fields or variables that change during its lifetime.

**Examples:**

- **Stateless:**  
  - A calculator class where every method just adds or multiplies numbers you give it, and doesn't keep track of previous results.
  - A service that always returns the current time.

- **Stateful:**  
  - A shopping cart object that remembers what items you’ve added.
  - A logger that remembers how many messages have been logged.

**In coding terms:**
```csharp
public class StatelessService
{
    public int Add(int a, int b) => a + b; // No fields, just does work
}

public class StatefulService
{
    private int _counter = 0; // This is state!
    public void Increment() => _counter++;
    public int GetValue() => _counter;
}
```

---

## 3. Why does this matter for Singleton/Scoped/Transient?

- **Singleton:** Share one instance for the whole app. Only safe for stateless or thread-safe state.
- **Scoped:** New instance per request. Good for things like `DbContext` or repositories.
- **Transient:** New instance every time. Good for lightweight, stateless services.

---

## **Summary Table**

| Lifetime    | Has State? | Example                             | When to use                |
|-------------|------------|-------------------------------------|----------------------------|
| Singleton   | No         | Logger with no fields, config reader| Stateless, thread-safe     |
| Scoped      | Yes/No     | DbContext, Repositories             | Per-request dependencies   |
| Transient   | No         | Utility classes, calculators        | Lightweight, stateless     |

---

**TL;DR:**  
- **Repositories using DbContext should be Scoped.**
- "No state" = doesn’t remember anything between uses (no changing fields).
- Only Singleton stateless or thread-safe services.

Let me know if you want code examples!



- CancellationToken only works when you carry them all the way down to the inner most async method that accepts it.
- example from API endpoint to db query method.


- Authentication and Authorization.

> Authentication is the process of verifying who the user is.

> Authorization is the process of verifying what a user can do.




# How to decide where to put ratings. endpoints ?
> IF we see the api endpoints so far. we see that 'Movies' is our resource. and we can get this resource, update and delete etc.
> Now rating are directly attached to the movies they are not independent ressource. We are going to get the ratings for the movie 
> So in our case they will live inside the movies.


- HATEOAS Don't use it.
> It is purely done on the controller level. we don't dive deep into application layer.

- what is versioning ?
> Once we release our API it is out there being consumed and we can't really introduce a braking changes to our contracts.
> If we want to make breaking changes. We have to introduce new version.
> URL based versioning the versionn is on the URL
> we don't want to over version. we should be careful with our vesioning because clients are very slow in terms of migrating to the new version.
> Even if you deprecate a version of your API we have to support it for the long time in case people don't want to move into a new version.
> Nobody want's to move if nothing breaks into their end.
> URL segment base versioning is very propular.


> Avoid Code Bloat: Versioning services and repositories would create massive duplication and maintenance overhead.

> Single Source of Truth: Your business logic and data access should remain consistent. The versioning is about how you present data to clients, not how you process it internally.

- When You Might Need Service Changes
> If you absolutely need different business logic for different versions:

> Add parameters to existing methods rather than creating new services
> Use feature flags or strategy patterns within the same service
> Create specialized mapper classes to handle the transformation between versions

> This keeps your core business logic clean while allowing flexibility at the presentation layer.



- what is swagger or now open api ?
> It is a way for describing language agnostic rest API and It is all about the specification.
> It allows both human and computer to understand the capability of the rest api.
> In terms of what is can and cannot do. and What contracts look like. using standardize format.
> main goal is to minize the time needed to document the api.

> Open api referes to the specification it self.
> Swagger now a days refers to family of open source tooling and everything around that aspect of openapi.

> open api = specification.
> swagger is tooling around open api.
